#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2013-2014 Parallels, Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from __future__ import print_function

import os
import sys
import commands
import subprocess
import argparse
import re

from keystoneclient.v2_0 import client as ksclient
import glanceclient
from glanceclient import exc
from glanceclient.openstack.common import strutils
from glanceclient.common import utils
from glanceclient.shell import OpenStackImagesShell

import prlsdkapi

prlconsts = prlsdkapi.consts

class PCSImagesShell(OpenStackImagesShell):

    def get_subcommand_parser(self, version):
        parser = self.get_base_parser()
        self.subcommands = {}
        subparsers = parser.add_subparsers(metavar='<subcommand>')
        submodule = utils.import_versioned_module(version, 'shell')
        self._find_actions(subparsers, self)
        return parser

    def _init_sdk(self, login, passwd):
        prlsdkapi.init_server_sdk()
        srv = prlsdkapi.Server()
        if not login:
            srv.login_local().wait()
        else:
            srv.login(login, passwd)
        return srv

    @utils.arg('ve_name', metavar='<VE_NAME>',
               help='Name or UUID of VM.')
    @utils.arg('--name', metavar='<NAME>',
               help='Name of image.')
    @utils.arg('--store', metavar='<STORE>',
               help='Store to upload image to.')
    @utils.arg('--owner', metavar='<TENANT_ID>',
               help='Store to upload image to.')
    @utils.arg('--min-disk', metavar='<DISK_GB>', type=int,
               help=('Minimum size of disk needed to '
                     'boot image (in gigabytes).'))
    @utils.arg('--min-ram', metavar='<DISK_RAM>', type=int,
               help=('Minimum amount of ram needed to '
                     'boot image (in megabytes).'))
    @utils.arg('--is-public', metavar='{True,False}',
               type=utils.string_to_bool,
               help='Make image accessible to the public.')
    @utils.arg('--is-protected', metavar='{True,False}',
               type=utils.string_to_bool,
               help='Prevent image from being deleted.')
    @utils.arg('--prl-login', metavar='<LOGIN>', help='')
    @utils.arg('--prl-passwd', metavar='<PASSWORD>', help='')
    def do_image_create(self, gc, args):
        if args.os_image_api_version != '2':
            raise Exception('Only image API version 2 is supported.')

        srv = self._init_sdk(args.prl_login, args.prl_passwd)
        ve = srv.get_vm_config(args.ve_name,
                    prlconsts.PGVC_SEARCH_BY_NAME |
                    prlconsts.PGVC_SEARCH_BY_UUID).wait()[0]

        # create an empty image
        schema = gc.schemas.get("image")
        _args = [(x[0].replace('-', '_'), x[1]) for x in vars(args).items()]
        fields = dict(filter(lambda x: x[1] is not None and
                             (x[0] == 'property' or
                              schema.is_core_property(x[0])),
                             _args))

        if ve.get_vm_type() == prlconsts.PVT_VM:
            fields['disk_format'] = 'ploop-vm'
        else:
            fields['disk_format'] = 'ploop-container'
        fields['container_format'] = 'bare'

        image = gc.images.create(**fields)

        image_ve = None
        try:
            # clone VE and upload it to glance
            job = ve.clone_ex("tmpl-" + image.id, '',
                              prlconsts.PCVF_CLONE_TO_TEMPLATE)
            image_ve = job.wait().get_param()

            # get first hdd
            hdd_count = image_ve.get_devs_count_by_type(prlconsts.PDE_HARD_DISK)
            if hdd_count < 1:
                raise Exception("There are no hard disks in VE.")
            hdd = image_ve.get_dev_by_type(prlconsts.PDE_HARD_DISK, 0)
            hdd_path = hdd.get_image_path()
            xml_path = os.path.join(hdd_path, "DiskDescriptor.xml")
            cmd = "ploop snapshot-list -H -o fname %s" % xml_path
            out = commands.getoutput(cmd)
            image_path = out.strip()

            with open(image_path) as f:
                gc.images.upload(image.id, f)

            with open(xml_path) as f:
                desc = f.read()

            gc.images.update(image.id,
                # Glance API v1 doesn't support line breaks
                pcs_disk_descriptor = desc.replace('\n', ''),
                pcs_ostemplate = image_ve.get_os_template(),
                pcs_image_name = os.path.basename(image_path))

            # print new image info
            image = gc.images.get(image.id)

            ignore = ['self', 'access', 'file', 'schema']
            image_dict = dict([item for item in image.iteritems()
                          if item[0] not in ignore])
            utils.print_dict(image_dict)
        except:
            gc.images.delete(image.id)
            raise
        finally:
            if image_ve:
                image_ve.delete().wait()
            srv.logoff()
            prlsdkapi.deinit_sdk()

try:
    PCSImagesShell().main(map(strutils.safe_decode, sys.argv[1:]))
except KeyboardInterrupt:
    print('... terminating PCS glance client', file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(utils.exception_to_str(e), file=sys.stderr)
    sys.exit(1)
